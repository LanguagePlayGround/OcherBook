PRIORITIZE BASED ON GETTING ON KOBO FOR REAL ASAP

0.0.8 - test on kobo
getting pressure 0 events with no x,y
flush events not quite working
fix wrapping bug in FontEngine::renderString
fonts are oversized
periodically do full refresh

0.0.9 - UI round 2
fix close button in SDL
FontEngine
    FontEngine is more of a layout engine...
    convert from RenderFb::outputWrapped to FontEngine::renderString
    use FontEngine::renderString on widgets (buttons, ...)
    FE::renderString should return bbox or bboxes
    layout by line, to do centering
    single global instance
HomeActivity
    real titles / authors
ReadActivity
    text size is unreliable
    page numbers
    title on system bar
resources:
    left arrow
    right arrow
    wrench
    font
    navigation
    clock
    network
    battery
    X close
    FF
    RW
    back
    circle scrubber / slider
    folded page
RLE
    RLE compress/decompress
    build step
battery
    RLE images

0.1.0 - UI round 3
fonts
    selection
        italic, bold faces
        sans, serif
    improved font metrics:
        subpixel rendering
        kerning
integrate libjpeg, libpng
HomeActivity
    cover art
persist shelf
    json vs Flattenable
widget
    packing
    make dirty rects more granular (eg, hiding SystemBar doesn't reflow entire page)
spinners
flag in Meta what hasn't been discovered yet (expensive to create icon, ...)
do settings apply before or after layout?
    better definition around what AttrSizeAbs, etc mean
    are absolute font sizes really absolute while in the layout?

0.1.1
testing
valgrind...
survive purgatory.sh
read an entire book on kobo

0.2.0
suspend





device specific:
    - abstractions:
        - filesystem
    - Kobo:
        - framebuffer
        - suspend / resume
        - touch input
        - home, power button
        - wireless
    resurrect non-fb output

layout:
    - pagination
        - discrete pages vs scrollable (makes no sense on e-ink)
    - margins
    - FreeType:
        - integrate into RenderFd for real word wrap
    - option to build some fonts into the binary for easy install
    - images

build system:
    - config system (current ocher.config is a mess)
    - modularize
    - detect platform, etc...
    - download tool
    - include kobo linux headers, for easier build
    - option to build-in all resources (fonts, icons, ...)

renderers:
    - user able to interrupt any long-running layout action
        - SDL seems to block signals by default
    - fd
    - ncurses
    - sdl
    - kobo mx50
    - ...
    - generic text printing routines
        - make FreeType optional (genericise as FontEngine)

formats:
    - probe file type
    - test UTF8 throughout
    - epub
        - CSS
    - text
    - markdown
    - ...

per-user:
    - all user record with optional OpenSSL-compatible encryption
    - keep personal log of books read (title, author, date, notes, ...)?
    - reading wish list
    - ability to export per-use stats
    - annotations
    - settings
        - fonts
        - past settings (these settings suck, want to undo)
        - ability to force settings (book can't change margins, font size, ...)
        - start / stop date of reading book
        - way to share metadata about the book (tweet / ... ?)

features:
    - clock
    - live links (eg: table of contents)
    - ability to compile-out large features
    - search
    - bookmarks
    - annotations
    - dictionary
    - time / date / calendar view
    - geek features:
        - options to validate epubs?
        - wirelessly sync with epubs on home server
    - organization:
        - consider separate use cases:
            - using ereader primarily vs synchronizing with server
        - ways of grouping / searching (author, genre, read/haven't read, ...)
        - how to attach metadata to each book?

harden:
    - test harness
    - valgrind across many epubs
    - huge fonts crash
    - stress-test airbag_fd
    - non-linux platforms hang in global ctor realloc
    - guerilla testing
    - general strategy for OOM

cleanup:
    - remove exceptions from File
    - allow std::bad_alloc?
    - clean up Path/File to be simpler, more posix-like

docs:
    - document complete walk-through of installing, recovery, etc
    - built-in links to free ebooks?

reader features:
    - pan
    - zoom
    - flip

metadata:
    - cache metadata in dotfiles beside the epub

translations

bluesky:
    - RSS
    - other free content
    - ...
